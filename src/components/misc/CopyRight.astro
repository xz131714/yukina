---
import { Icon } from "astro-icon/components";
import RyuChanConfig from "../../../ryuchan.config";
import key from "../../i18n/keys";
import { i18n } from "../../i18n/translation";
import config from "../../config";
import { formatDate } from "../../utils/date";

export interface Props {
  title: string;
  published: Date;
  license?: {
    name: string;
    url?: string;
  };
  sourceLink?: string;
  author?: string;
  slug?: string;
}

const { title, published, license, author, sourceLink, slug } = Astro.props;
const umamiConfig = config.umami;
---

<div
  class="fonts relative mt-4 h-32 w-full rounded-lg bg-gray-100 px-4 py-4 lg:h-36 dark:bg-[var(--background-color)]"
>
  <div
    class="absolute left-4 top-4 z-10 flex h-24 flex-col justify-between lg:h-28"
  >
    <div class="flex flex-col items-start space-y-1">
      <p class="!my-0 pl-1 font-bold text-[var(--text-color)]">{title}</p>
      <a
        class="rounded-md px-1 py-0.5 text-sm transition-all hover:bg-[var(--primary-color-lighten)]"
        id={sourceLink ? "source-link" : "post-url"}
        href={sourceLink ?? ""}>{sourceLink ?? ""}</a
      >
    </div>
    <div class="ml-1 flex flex-row space-x-4 lg:space-x-8">
      <div class="flex flex-col">
        <span class="select-none text-sm text-[var(--text-color-lighten)]"
          >{i18n(key.copy_right_author)}</span
        >
        <p
          class="!my-0 line-clamp-1 text-sm text-[var(--text-color)] lg:text-base"
        >
          {author ?? RyuChanConfig.username}
        </p>
      </div>
      <div class="flex flex-col">
        <span class="select-none text-sm text-[var(--text-color-lighten)]"
          >{i18n(key.copy_right_publish_date)}</span
        >
        <p
          class="!my-0 line-clamp-1 text-sm text-[var(--text-color)] lg:text-base"
        >
          {formatDate(published, RyuChanConfig.locale)}
        </p>
      </div>
      <div class="flex flex-col">
        <span class="select-none text-sm text-[var(--text-color-lighten)]"
          >{i18n(key.copy_right_license)}</span
        >
        <!-- with special license -->
        {
          license && license.url && (
            <a
              class="line-clamp-1 text-sm text-[var(--text-color)] lg:text-base"
              href={license.url}
              target="_blank"
            >
              {license.name}
            </a>
          )
        }
        {
          license && !license.url && (
            <p class="!my-0 line-clamp-1 text-sm text-[var(--text-color)] lg:text-base">
              {license.name}
            </p>
          )
        }
        <!-- without special license -->
        {
          !license && (
            <a
              class="line-clamp-1 text-sm text-[var(--text-color)] lg:text-base"
              href={RyuChanConfig.license.url}
              target="_blank"
            >
              {RyuChanConfig.license.name}
            </a>
          )
        }
      </div>
      <!-- page views -->
      {slug && (
        <div class="flex flex-col">
          <span class="select-none text-sm text-[var(--text-color-lighten)]">浏览量</span>
          <span class="text-50 text-sm font-medium lg:text-base" id="page-views-display">加载中...</span>
        </div>
      )}
    </div>
  </div>
  <div
    class="relative right-0 top-1/2 z-0 flex h-32 -translate-y-1/2 overflow-hidden lg:h-36"
  >
    <Icon
      name="ooui:logo-cc"
      size={230}
      class="absolute right-0 top-1/2 -translate-y-1/2 text-gray-300 dark:text-[var(--card-color)]"
    />
  </div>
</div>

<style>
  .fonts {
    font-family: var(--primary-font);
  }
</style>

{slug && umamiConfig?.enable && (  
  <script define:vars={{ slug, umamiConfig }}>  
    // 获取文章浏览量统计  
    async function fetchPostViews() {  
      if (!umamiConfig.enable) {  
        return;  
      }  
        
      try {  
        // 第一步：获取网站ID和token  
        const shareResponse = await fetch(`${umamiConfig.baseUrl}/api/share/${umamiConfig.shareId}`);  
        if (!shareResponse.ok) {  
          throw new Error('获取分享信息失败');  
        }  
        const shareData = await shareResponse.json();  
        const { websiteId, token } = shareData;  
          
        // 第二步：获取统计数据  
        const currentTimestamp = Date.now();  
        const statsUrl = `${umamiConfig.baseUrl}/api/websites/${websiteId}/stats?startAt=0&endAt=${currentTimestamp}&unit=hour&timezone=${encodeURIComponent(umamiConfig.timezone)}&url=%2Fblog%2F${slug}&compare=false`;  
          
        const statsResponse = await fetch(statsUrl, {  
          headers: {  
            'x-umami-share-token': token  
          }  
        });  
          
        if (!statsResponse.ok) {  
          throw new Error('获取统计数据失败');  
        }  
          
        const statsData = await statsResponse.json();  
        const pageViews = statsData.pageviews?.value || 0;  
        const visits = statsData.visits?.value || 0;  
          
        const displayElement = document.getElementById(`page-views-display`);  
        if (displayElement) {  
          displayElement.textContent = `${pageViews} 次浏览 · ${visits} 次访问`;  
        }
      } catch (error) {  
        console.error('Error fetching page views for', slug, ':', error);  
        const displayElement = document.getElementById(`page-views-display`); 
        if (displayElement) {  
          displayElement.textContent = '统计不可用';  
        }
      }  
    }  
  
    // 页面加载完成后获取统计数据
    fetchPostViews();
    document.addEventListener('astro:page-load', fetchPostViews);
  </script>
)}
