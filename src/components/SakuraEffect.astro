---  
import RyuChanConfig from "../../ryuchan.config";  
---  
  
<script define:vars={{ sakuraConfig: RyuChanConfig.sakura || { enable: false } }}>  
  // 樱花对象类  
  class Sakura {  
    constructor(x, y, s, r, fn, idx, img, limitArray, config) {  
      this.x = x;  
      this.y = y;  
      this.s = s;  
      this.r = r;  
      this.fn = fn;  
      this.idx = idx;  
      this.img = img;  
      this.limitArray = limitArray;  
      this.config = config;  
    }  
  
    draw(cxt) {  
      cxt.save();  
      cxt.translate(this.x, this.y);  
      cxt.rotate(this.r);  
      cxt.drawImage(this.img, 0, 0, 40 * this.s, 40 * this.s);  
      cxt.restore();  
    }  
  
    update() {  
      this.x = this.fn.x(this.x, this.y);  
      this.y = this.fn.y(this.y, this.y);  
      this.r = this.fn.r(this.r);  
  
      if (  
        this.x > window.innerWidth ||  
        this.x < 0 ||  
        this.y > window.innerHeight ||  
        this.y < 0  
      ) {  
        if (this.limitArray[this.idx] === -1) {  
          this.resetPosition();  
        } else {  
          if (this.limitArray[this.idx] > 0) {  
            this.resetPosition();  
            this.limitArray[this.idx]--;  
          }  
        }  
      }  
    }  
  
    resetPosition() {  
      this.r = getRandom('fnr', this.config);  
      if (Math.random() > 0.4) {  
        this.x = getRandom('x', this.config);  
        this.y = 0;  
        this.s = getRandom('s', this.config);  
        this.r = getRandom('r', this.config);  
      } else {  
        this.x = window.innerWidth;  
        this.y = getRandom('y', this.config);  
        this.s = getRandom('s', this.config);  
        this.r = getRandom('r', this.config);  
      }  
    }  
  }  
  
  // 樱花列表类  
  class SakuraList {  
    constructor() {  
      this.list = [];  
    }  
  
    push(sakura) {  
      this.list.push(sakura);  
    }  
  
    update() {  
      for (let i = 0, len = this.list.length; i < len; i++) {  
        this.list[i].update();  
      }  
    }  
  
    draw(cxt) {  
      for (let i = 0, len = this.list.length; i < len; i++) {  
        this.list[i].draw(cxt);  
      }  
    }  
  
    get(i) {  
      return this.list[i];  
    }  
  
    size() {  
      return this.list.length;  
    }  
  }  
  
  // 获取随机值的函数  
  function getRandom(option, config) {  
    let ret;  
    let random;  
  
    switch (option) {  
      case 'x':  
        ret = Math.random() * window.innerWidth;  
        break;  
      case 'y':  
        ret = Math.random() * window.innerHeight;  
        break;  
      case 's':  
        ret = config.size.min + Math.random() * (config.size.max - config.size.min);  
        break;  
      case 'r':  
        ret = Math.random() * 6;  
        break;  
      case 'fnx':  
        random = config.speed.horizontal.min + Math.random() * (config.speed.horizontal.max - config.speed.horizontal.min);  
        ret = function (x, y) {  
          return x + random;  
        };  
        break;  
      case 'fny':  
        random = config.speed.vertical.min + Math.random() * (config.speed.vertical.max - config.speed.vertical.min);  
        ret = function (x, y) {  
          return y + random;  
        };  
        break;  
      case 'fnr':  
        ret = function (r) {  
          return r + config.speed.rotation;  
        };  
        break;  
    }  
    return ret;  
  }  
  
  // 樱花管理器类  
  class SakuraManager {  
    constructor(config) {  
      this.config = config;  
      this.canvas = null;  
      this.ctx = null;  
      this.sakuraList = null;  
      this.animationId = null;  
      this.img = null;  
      this.isRunning = false;  
    }  
  
    async init() {  
      if (!this.config.enable || this.isRunning) {  
        return;  
      }  
  
      this.img = new Image();  
      this.img.src = '/sakura.png';  
  
      await new Promise((resolve, reject) => {  
        if (this.img) {  
          this.img.onload = () => resolve();  
          this.img.onerror = () => reject(new Error('Failed to load sakura image'));  
        }  
      });  
  
      this.createCanvas();  
      this.createSakuraList();  
      this.startAnimation();  
      this.isRunning = true;  
    }  
  
    createCanvas() {  
      this.canvas = document.createElement('canvas');  
      this.canvas.height = window.innerHeight;  
      this.canvas.width = window.innerWidth;  
      this.canvas.setAttribute('style', `position: fixed; left: 0; top: 0; pointer-events: none; z-index: ${this.config.zIndex};`);  
      this.canvas.setAttribute('id', 'canvas_sakura');  
      document.body.appendChild(this.canvas);  
      this.ctx = this.canvas.getContext('2d');  
  
      window.addEventListener('resize', this.handleResize.bind(this));  
    }  
  
    createSakuraList() {  
      if (!this.img || !this.ctx) return;  
  
      this.sakuraList = new SakuraList();  
      const limitArray = new Array(this.config.sakuraNum).fill(this.config.limitTimes);  
  
      for (let i = 0; i < this.config.sakuraNum; i++) {  
        const randomX = getRandom('x', this.config);  
        const randomY = getRandom('y', this.config);  
        const randomR = getRandom('r', this.config);  
        const randomS = getRandom('s', this.config);  
        const randomFnx = getRandom('fnx', this.config);  
        const randomFny = getRandom('fny', this.config);  
        const randomFnR = getRandom('fnr', this.config);  
  
        const sakura = new Sakura(  
          randomX,  
          randomY,  
          randomS,  
          randomR,  
          {  
            x: randomFnx,  
            y: randomFny,  
            r: randomFnR,  
          },  
          i,  
          this.img,  
          limitArray,  
          this.config  
        );  
  
        sakura.draw(this.ctx);  
        this.sakuraList.push(sakura);  
      }  
    }  
  
    startAnimation() {  
      if (!this.ctx || !this.canvas || !this.sakuraList) return;  
  
      const animate = () => {  
        if (!this.ctx || !this.canvas || !this.sakuraList) return;  
  
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);  
        this.sakuraList.update();  
        this.sakuraList.draw(this.ctx);  
        this.animationId = requestAnimationFrame(animate);  
      };  
  
      this.animationId = requestAnimationFrame(animate);  
    }  
  
    handleResize() {  
      if (this.canvas) {  
        this.canvas.width = window.innerWidth;  
        this.canvas.height = window.innerHeight;  
      }  
    }  
  
    stop() {  
      if (this.animationId) {  
        cancelAnimationFrame(this.animationId);  
        this.animationId = null;  
      }  
  
      if (this.canvas) {  
        document.body.removeChild(this.canvas);  
        this.canvas = null;  
      }  
  
      window.removeEventListener('resize', this.handleResize.bind(this));  
      this.isRunning = false;  
    }  
  }  
  
  // 初始化樱花特效  
  function initSakura() {  
    if (window.sakuraInitialized || !sakuraConfig.enable) {  
      return;  
    }  
  
    const sakuraManager = new SakuraManager(sakuraConfig);  
    sakuraManager.init();  
    window.sakuraInitialized = true;  
  }  
  
  // 页面加载完成后初始化  
  if (document.readyState === 'loading') {  
    document.addEventListener('DOMContentLoaded', initSakura);  
  } else {  
    initSakura();  
  }  
  
  // 支持 Swup 页面转换  
  if (window.swup?.hooks) {  
    window.swup.hooks.on("content:replace", initSakura);  
  } else {  
    document.addEventListener("swup:enable", () => {  
      window.swup.hooks.on("content:replace", initSakura);  
    });  
  }  
</script>