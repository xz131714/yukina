---
import { IdToSlug } from "../../utils/security/hash";
import { Icon } from "astro-icon/components";
import PostCardInfoIcon from "../../components/widgets/PostCardInfoIcon.astro";
import { GetCoverURLForUnspecifiedEntry } from "../../utils/media/cover";
import { i18n } from "../../i18n/translation";
import I18nKeys from "../../i18n/keys";
import RyuChanConfig from "../../../ryuchan.config";
import config from "../../config";
import { formatDate } from "../../utils/date";

export interface Props {
  id: string;
  title: string;
  published: Date;
  category?: string;
  tags?: string[];
  description?: string;
  image?: string;
  readingMetadata: { time: number; wordCount: number };
  slug?: string;
}

const props = Astro.props;
const entryID = IdToSlug(props.id);
const contentUrl = `/blog/${entryID}`;
const { time, wordCount } = props.readingMetadata;
const slug = props.slug || entryID;
const umamiConfig = config.umami;
---

<div
  class="mx-3 flex flex-col rounded-3xl bg-[var(--card-color)] lg:mx-0 lg:h-[212px]"
>
  <a
    href={contentUrl}
    class="relative h-[128px] transition-all hover:brightness-75 lg:hidden"
  >
    <img
      class="lozad absolute left-0 top-0 h-full w-full rounded-t-3xl object-cover lg:hidden"
      data-src={props.image ?? GetCoverURLForUnspecifiedEntry(entryID)}
      alt="CoverPost"
    />
    <div class="absolute bottom-2 w-full">
      <div class="mx-2 flex flex-row justify-between">
        <div
          class="flex flex-row items-center space-x-2 rounded-md bg-black/50 px-1.5 py-0.5 text-[var(--primary-color-lighten)] dark:text-[var(--text-color)]"
        >
          <Icon name="cuida:calendar-outline" />
          <span class="select-none">
            {formatDate(props.published, RyuChanConfig.locale)}
          </span>
        </div>
        {
          props.category && (
            <div class="flex flex-row items-center space-x-2 rounded-md bg-black/50 px-1.5 py-0.5 text-[var(--primary-color-lighten)] dark:text-[var(--text-color)]">
              <Icon name="dashicons:category" />
              <span class="max-w-28 select-none truncate">
                {props.category}
              </span>
            </div>
          )
        }
      </div>
    </div>
  </a>
  <div class="flex h-[128px] flex-row lg:h-[212px]">
    <div
      class="flex w-full flex-col justify-between pb-5 pl-5 pr-6 pt-3 lg:w-[calc(var(--page-width-lg)-404px)] lg:py-7 lg:pr-0 xl:w-[calc(var(--page-width-xl)-676px)]"
    >
      <div class="flex w-full flex-row items-center">
        <div
          class="mx-2 hidden h-6 w-1 translate-y-[1px] rounded-lg bg-[var(--primary-color)] lg:block"
        >
        </div>
        <a href={contentUrl} class="title">
          <p class="truncate">{props.title}</p>
          <Icon
            name="cuida:caret-right-outline"
            class="translate-y-[0.07rem] text-[var(--primary-color)]"
          />
        </a>
      </div>
      <div class="ml-2 hidden lg:block">
        <ul class="flex flex-row space-x-4">
          <li class="data space-x-2">
            <PostCardInfoIcon name="cuida:calendar-outline" />
            <span class="select-none">
              {formatDate(props.published, RyuChanConfig.locale)}
            </span>
          </li>
          {
            props.category && (
              <li class="data space-x-1.5">
                <PostCardInfoIcon name="dashicons:category" />
                <a
                  class="select-none rounded-md px-1.5 py-0.5 text-[var(--text-color-lighten)] transition-all hover:bg-[var(--primary-color-lighten)] hover:text-[var(--primary-color)]"
                  href={`/categories/${IdToSlug(props.category)}`}
                >
                  {props.category}
                </a>
              </li>
            )
          }
          <li
            class="hidden items-center overflow-clip md:block lg:hidden xl:block"
          >
            {
              props.tags && (
                <div class="data space-x-2">
                  <PostCardInfoIcon name="mdi:tag-outline" />
                  <ul class="flex flex-row items-center space-x-1">
                    {props.tags.slice(0, 3).map((tag, index) => (
                      <li class="flex select-none flex-row items-center text-[var(--text-color-lighten)]">
                        {index > 0 && <span class="pr-1">/</span>}
                        <a
                          class="rounded-md px-1.5 py-0.5 transition-all hover:bg-[var(--primary-color-lighten)] hover:text-[var(--primary-color)]"
                          href={`/tags/${IdToSlug(tag)}`}
                        >
                          {tag}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              )
            }
          </li>
        </ul>
      </div>
      <div class="lg:ml-2">
        <p class="desc">{props.description}</p>
      </div>
      <div>
        <div class="select-none lg:ml-2">
          <div class="reading-time">
            <span>
              {wordCount}
              {i18n(I18nKeys.post_card_words)}
            </span>
            <span>|</span>
            <span>
              {time}
              {i18n(I18nKeys.post_card_minutes)}
            </span>
            <span>|</span>
            <span class="text-50 text-sm font-medium" id={`page-views-${slug}`}>加载中...</span>
          </div>
        </div>
      </div>
    </div>
    <div class="cover-container">
      <a href={contentUrl} class="cover-wrapper">
        <Icon class="right-icon" name="cuida:caret-right-outline" size={96} />
        <img
          class="lozad h-[212px] w-[404px] select-none rounded-r-3xl object-cover dark:brightness-90"
          data-src={props.image ?? GetCoverURLForUnspecifiedEntry(entryID)}
          alt="PostCover"
        />
      </a>
    </div>
  </div>
</div>
<style>
  .title {
    @apply flex w-full flex-row items-center space-x-1 align-top text-xl font-semibold text-[var(--text-color)] lg:text-2xl;
    @apply transition-all hover:text-[var(--primary-color)];
    font-family: var(--primary-font);
  }

  .data {
    font-family: var(--primary-font);
    @apply flex flex-row items-center;
  }

  .data > span {
    @apply inline-block self-center truncate align-middle text-[var(--text-color-lighten)];
    font-family: var(--primary-font);
  }

  .desc {
    @apply line-clamp-1 text-[var(--text-color)];
    font-family: var(--primary-font);
  }

  .reading-time {
    @apply space-x-3 align-middle text-sm text-[var(--text-color-lighten)];
    font-family: var(--primary-font);
  }

  .cover-container {
    @apply relative ml-2 hidden h-[212px] min-w-[404px] max-w-[404px] select-none lg:block;
    clip-path: polygon(0 0%, 100% 0%, 100% 100%, 10% 100%);
  }

  .cover-wrapper {
    @apply h-full w-full select-none overflow-hidden rounded-r-3xl;
  }

  .cover-wrapper::before {
    @apply absolute left-0 h-full w-0 select-none rounded-r-3xl bg-black opacity-50;
    content: "";
    z-index: 1;
    transition: all 0.3s;
  }

  .cover-wrapper::before:hover {
    @apply h-full w-full select-none;
  }

  .right-icon {
    @apply absolute left-1/2 top-1/2 z-[10] -translate-x-1/2 -translate-y-1/2 text-white;
    clip-path: polygon(0 0, 0 0, 0 100%, 0 100%);
    transition: all 0.3s;
  }

  .cover-wrapper:hover .right-icon {
    clip-path: polygon(0 0, 100% 0%, 100% 100%, 0 100%);
  }
</style>

{umamiConfig?.enable && (  
  <script define:vars={{ slug, umamiConfig }}>  
    // 获取文章浏览量统计  
    async function fetchPostViews() {  
      if (!umamiConfig.enable) {  
        return;  
      }  
        
      try {  
        // 第一步：获取网站ID和token  
        const shareResponse = await fetch(`${umamiConfig.baseUrl}/api/share/${umamiConfig.shareId}`);  
        if (!shareResponse.ok) {  
          throw new Error('获取分享信息失败');  
        }  
        const shareData = await shareResponse.json();  
        const { websiteId, token } = shareData;  
          
        // 第二步：获取统计数据  
        const currentTimestamp = Date.now();  
        const statsUrl = `${umamiConfig.baseUrl}/api/websites/${websiteId}/stats?startAt=0&endAt=${currentTimestamp}&unit=hour&timezone=${encodeURIComponent(umamiConfig.timezone)}&url=%2Fblog%2F${slug}&compare=false`;  
          
        const statsResponse = await fetch(statsUrl, {  
          headers: {  
            'x-umami-share-token': token  
          }  
        });  
          
        if (!statsResponse.ok) {  
          throw new Error('获取统计数据失败');  
        }  
          
        const statsData = await statsResponse.json();  
        const pageViews = statsData.pageviews?.value || 0;  
        const visits = statsData.visits?.value || 0;  
          
        const displayElement = document.getElementById(`page-views-${slug}`);  
        if (displayElement) {  
          displayElement.textContent = `浏览量 ${pageViews} · 访问数 ${visits}`;  
        }  
      } catch (error) {  
        console.error('Error fetching page views for', slug, ':', error);  
        const displayElement = document.getElementById(`page-views-${slug}`);  
        if (displayElement) {  
          displayElement.textContent = '统计不可用';  
        }  
      }  
    }  
  
    // 页面加载完成后获取统计数据
    fetchPostViews();
    document.addEventListener('astro:page-load', fetchPostViews);
  </script>
)}
