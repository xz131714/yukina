---
// Component imports
import Main from "../layouts/MainLayout.astro";
import PostCard from "../components/post/PostCard.astro";
import Pagination from "../components/controllers/Pagination.astro";
// Utils
import type { PaginateFunction } from "astro";
import { GetSortedPosts } from "../utils/content";

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  const postCollections = await GetSortedPosts();
  
  // 预渲染所有文章内容以获取readingMetadata
  const enhancedPostCollections = await Promise.all(
    postCollections.map(async (post) => {
      try {
        const { render } = await import('astro:content');
        const { remarkPluginFrontmatter } = await render(post);
        return {
          ...post,
          readingMetadata: remarkPluginFrontmatter?.readingMetadata || { time: 0, wordCount: 0 }
        };
      } catch (error) {
        console.error(`Error rendering post ${post.id}:`, error);
        return {
          ...post,
          readingMetadata: { time: 0, wordCount: 0 }
        };
      }
    })
  );
  
  return paginate(enhancedPostCollections, { pageSize: 6 });
}
const { page } = Astro.props;
---

<Main>
  <div class="space-y-8">
    <div class="w-full space-y-4">
      {
        page.data.map((entry, index) => (
          <div
            class="onload-animation"
            style={`animation-delay: calc(var(--onload-animation-delay) + ${index + 1} * var(--onload-animation-interval));`}
          >
            <PostCard
              id={entry.id}
              title={entry.data.title}
              published={entry.data.published}
              category={entry.data.category}
              tags={entry.data.tags}
              description={entry.data.description}
              image={entry.data.cover}
              readingMetadata={entry.readingMetadata || { time: 0, wordCount: 0 }}
            />
          </div>
        ))
      }
    </div>
    <Pagination
      class="onload-animation"
      lastPage={page.lastPage}
      current={page.currentPage}
      prevURL={page.url.prev}
      nextURL={page.url.next}
      style={`animation-delay: calc(var(--onload-animation-delay) + ${page.data.length + 1} * var(--onload-animation-interval));`}
    />
  </div>
</Main>
